openapi: 3.0.1
info:
  title: Clean architecture API
  version: '1.0.0'
servers:
  - url: 'http://localhost:8080'
    description: local
paths:
  /clean-architecture/users:
    get:
      tags:
        - Users
      operationId: getAllUsers
      description: 'Получить всех пользователей'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserBackendResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
#--------------------------------------------------------------------------------------------------------#
  /clean-architecture/users/{uid}:
    get:
      tags:
        - Users
      operationId: getUserByUid
      description: 'Получить пользователя по uid'
      parameters:
        - name: uid
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserBackendResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
#--------------------------------------------------------------------------------------------------------#
components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    '401':
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    404:
      description: NOT_FOUND
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'

  schemas:
    BasicBackendResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaData'
        errorCode:
          type: string
        description:
          type: string
#--------------------------------------------------------------------------------------------------------#
    BackendErrorResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaData'
        errorCode:
          type: string
        description:
          type: string
#--------------------------------------------------------------------------------------------------------#
    MetaData:
      type: object
      properties:
        timestamp:
          type: string
        path:
          type: string
#--------------------------------------------------------------------------------------------------------#
    ListUserBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/components/schemas/UserResponse'
#--------------------------------------------------------------------------------------------------------#
    SingleUserBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              $ref: '#/components/schemas/UserResponse'
#--------------------------------------------------------------------------------------------------------#
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uid:
          type: string
        type:
          type: string
        isActive:
          type: boolean
#--------------------------------------------------------------------------------------------------------#
  securitySchemes:
    bearer-key:
      type: http
      scheme: bearer
      bearerFormat: JWT